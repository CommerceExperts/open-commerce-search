# Reference configuration in the HOCON format configuration
# To overwrite values, copy the relevant paths to a separate file 'suggest.conf'
suggest {
  server: {
    port: 8081
    address: "0.0.0.0"
  }
  dataprovider: [
    # here you can define config objects for the different DataProvider implementation, for example:
//    {
//      type: "de.cxp.ocs.elasticsearch.ElasticsearchSuggestDataProvider"
//      config: {
//        # can be a comma separated list to specify several endpoints
//        elasticsearch.hosts: "localhost:9200"
//        elasticsearch.auth: ""
//
//        suggest.index.default: {
//          # configure maxFetchSize (for aggregations and records) per index
//          maxFetchSize: 1000
//          # configure if similar queries from different sources should be deduplicated
//          deduplicate: true
//          sourceFields: "productName"
//        }
//        # overwrites per index:
//        suggest.index.<indexName>: {
//          # enable availability of index name like that. if not set, the data provider will simply check, if index exists
//          # usefull to exclude indexes for suggest
//          enable: true
//          # specify fields from which suggestions should be fetched:
//          sourceFields: "brand,category"
//        }
//      }
//    }

    # another example for S3ArchiveProvider
//    {
//      type: "de.cxp.ocs.smartsuggest.S3ArchiveProvider"
//      config: {
//        bucket: "" #required
//        region: ""
//        prefix: ""
//      }
//    }
  ]
  service {
    max-idle-minutes: 30
    mgmt-path-prefix: "" # Should start with a slash and end without
  }

  # basic suggester settings
  update-rate: 60
  preload-indexes: null # comma separated string
  index-folder: null

  # advanced behaviour settings. All the following settings can be overwritten per index
  locale: ""
  group {
    key: null
    prefetch-limit-factor: 1

    # Depends on a configured `suggest.group.key` property
    # Expects the property to be specified in the format 'group1=0.0,group2=0.0'
    # with the group names that exist in your suggestion data and double values.
    # The values are considered as shares.
    share-conf: ""

    # Depends on a configured `suggest.group.key` property
    # Will not be considered if suggest.group.share.conf is enabled!!
    # Expects the property to be specified in the format 'group1=N,group2=M'
    # with the group names that exist in your suggestion data and integer values.
    # The values are considered as absolute limits.
    cutoff-conf: ""

    # If 'suggest.group.key' is defined, this property expects a comma separated list of groups related to it.
    deduplication-order: ""
  }
  data-source-merger: false
  always-do-fuzzy: false
  concurrent-indexation: true
  sort-strategy: "PrimaryAndSecondaryByWeight"
  max-sharpened-queries: 12

  # to overwrite a setting per index, add the index name as root object for those settings, for example:
//  "my_index": {
//    group: {
//      key: "type"
//      cutoff-conf: "keyword=4,brand=3"
//    }
//    always-do-fuzzy: true
//  }
}




